}
get <-function() x
setinverse <-function(solve ...) m<<- solve
getinverse <-function() m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getinverse()
if(!is.null(m))
{message("getting the cached matrix inverse")
return(m)
}
matrix<-x$get()
m<-solve(matrix)
x$setinverse(m)
m
}
cacheSolve(c)
cacheSolve()
getinverse()
getinverse(c)
makeCacheMatrix(c)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set <-function(y)
{ x<<-y
m<<-NULL
}
get <-function() x
setinverse <-function(solve ...) m<<- solve(x)
getinverse <-function() m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getinverse()
if(!is.null(m))
{message("getting the cached matrix inverse")
return(m)
}
matrix<-x$get()
m<-solve(matrix)
x$setinverse(m)
m
}
makeCacheMatrix(c)
cacheSolve(c)
getinverse()
getinverse(c)
debug(makeCacheMatrix(c))
makeCacheMatrix(c)
source('~/Desktop/Rcoursera/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set <-function(y)
{ x<<-y
m<<-NULL
}
get <-function() x
setinverse <-function(solve ...) m<<- solve(x)
getinverse <-function( ) m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getinverse()
if(!is.null(m))
{message("getting the cached matrix inverse")
return(m)
}
matrix<-x$get()
m<-solve(matrix)
x$setinverse(m)
m
}
function(dd=matrix()){solve(dd)}
mif <-function(dd=matrix()){solve(dd)}
mif(c)
mif(solve(c))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set <-function(y)
{ x<<-y
m<<-NULL
}
get <-function( ) x
setinverse <-function(x ...) m<<- solve(x)
getinverse <-function( ) m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getinverse()
if(!is.null(m))
{message("getting the cached matrix inverse")
return(m)
}
matrix<-x$get()
m<-solve(matrix)
x$setinverse(m)
m
}
makeCacheMatrix(C)
makeCacheMatrix(c)
getinverse(x)
getinverse(c)
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m))
{message("getting the cached matrix inverse")
return(m)
}
m <- solve(x$get())
x$setinverse(m)
m
}
c
cacheSolve(c)
cacheSolve <- function(x = matrix()) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m))
{message("getting the cached matrix inverse")
return(m)
}
m <- solve(x$get())
x$setinverse(m)
m
}
cacheSolve(c)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set <-function(y)
{ x<<-y
m<<-NULL
}
get <-function( ) x
setinverse <-function(x ...) m<<- solve(x)
getinverse <-function( ) m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set <-function(y)
{ x<<-y
m<<-NULL
}
get <- function() x
setinverse <-function(x ...) m<<- solve(x)
getinverse <-function( ) m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set <-function(y)
{ x<<-y
m<<-NULL
}
get <- function() x
setinverse <-function(x ...)
m<<- solve(x)
getinverse <-function( )
m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve(c)
makeCacheMatrix(c)
dim(c)
c=rbind(c(1, -1/4), c(-1/4, 1))
makeCacheMatrix(c)
cacheSolve(c)
dim(c)
makeCacheMatrix <- function(x = matrix()) {
m<-matrx(0,dim(c))
set <-function(y)
{ x<<- y
m<<- NULL
}
get <- function() x
setinverse <-function(x ...)
m<<- solve(x)
getinverse <-function( )
m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m<-matrx(0,nrow=2,ncol=2)
set <-function(y)
{ x<<- y
m<<- NULL
}
get <- function() x
setinverse <-function(x ...)
m<<- solve(x)
getinverse <-function( )
m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m<-matrix(0,nrow=2,ncol=2)
set <-function(y)
{ x<<- y
m<<- NULL
}
get <- function() x
setinverse <-function(x ...)
m<<- solve(x)
getinverse <-function( )
m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m<-matrix(0,nrow=2,ncol=2)
set <-function(y)
{ x<<- y
m<<- NULL
}
get <- function() x
setinverse <-function(x ...)
m<<- solve(x)
getinverse <-function( )
m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
solve(C)
solve(c)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(c(1,2,3,4,5))
cachemean(c(1,2,3,4,5))
cachemean(y=c(1,2,3,4,5))
x<-(1,2,3,4)
x<-c(1,2,3,4)
makeVector(x)
cachemean(x)
cachemean(makeVector(c(1,2,3,4))))
cachemean(makeVector(c(1,2,3,4)))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(solve(c))
)
c
c=rbind(c(1, -1/4), c(-1/4, 1))
c
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(solve(c))
)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y)
{ x<<- y
m<<- NULL
}
get <- function() x
setinverse <-function(x ...) m<<- solve(x)
getinverse <-function( ) m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m))
{message("getting the cached matrix inverse")
return(m)
}
m <- solve(x$get())
x$setinverse(m)
m
}
cacheSolve(makeCacheMatrix(solve(c))
)
cacheSolve(makeCacheMatrix(c))
x$getinverse(
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y)
{ x<<- y
m<<- NULL
}
get <- function() x
setinverse <-function(x ...) m<<- solve(x)
getinverse <-function( ) m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m))
{message("getting the cached matrix inverse")
return(m)
}
m <- solve(x$get())
x$setinverse(m)
m
}
cacheSolve(makeCacheMatrix(c))
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
source('~/Desktop/Rcoursera/Curso3/Q1.R')
source('~/Desktop/Rcoursera/Curso3/Q2..R')
install.packages("xlsx")
source('~/Desktop/Rcoursera/Curso3/Q2..R')
View(NGAPData)
View(NGAPData)
source('~/Desktop/Rcoursera/Curso3/Q2..R')
source('~/Desktop/Rcoursera/Curso3/Q2..R')
source('~/Desktop/Rcoursera/Curso3/Q2..R')
install.packages("xml")
Y
install.packages("XML")
install.packages("XML2")
install.packages("XML2R")
install.packages("XML2R")
install.packages("XML")
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
install.packages(c("MASS", "swirl"))
install.packages("XML")
install.packages("XML")
R CMD INSTALL XML_3.93-0.tgz
CMD INSTALL XML_3.93-0.tgz
INSTALL XML_3.93-0.tgz
install.packages("XML")
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q3.R')
source('~/Desktop/Rcoursera/Curso3/Q5.r')
source('~/Desktop/Rcoursera/Curso3/Q5.r')
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
source('~/Desktop/Rcoursera/Curso3/Q5.r')
source('~/Desktop/Rcoursera/Curso3/Q5.r')
source('~/Desktop/Rcoursera/Curso3/Q5.r')
source('~/Desktop/Rcoursera/Curso3/Q5.r')
source('~/Desktop/Rcoursera/Curso3/Q5.r')
source('~/Desktop/Rcoursera/Curso3/Q5.r')
source('~/Desktop/Rcoursera/Curso3/Q5.r')
source('~/Desktop/Rcoursera/Curso3/Q5.r')
source('~/Desktop/Rcoursera/Curso3/Q5.r')
source('~/Desktop/Rcoursera/Curso3/Q5.r')
source('~/Desktop/Rcoursera/Curso3/Q5.r')
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
source('~/Desktop/Rcoursera/Curso3/Q21.R')
source('~/Desktop/Rcoursera/Curso3/Q21.R')
1
install.packages("httr", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("RMySQL", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages('RMySQL', repos
="http://www.biometrics.mtu.edu/CRAN/", dependencies=TRUE ,
type='source')
install.packages('RMySQL', repos
="http://www.biometrics.mtu.edu/CRAN/", dependencies=TRUE ,
type='source')
library(RMySQL)
library("RMySQL")
install.packages('RMySQL',type='source')
install.packages("RMySQL", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages('RMySQL',type='source',lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RMySQL")
install.packages('RMySQL',type='source',lib="/Users/rainier/Library/R/3.1/library")
install.packages('RMySQL',lib="/Users/rainier/Library/R/3.1/library")
install.packages('RMySQL',type='source',lib="/Users/rainier/Library/R/3.1/library"
)
install.packages('RMySQL',type='source',lib="/Users/rainier/Library/R/3.1/library"
,--with-mysql-lib="/Applications/MAMP/tmp/mysql/")
install.packages('RMySQL',type='source',lib="/Users/rainier/Library/R/3.1/library"
,'--with-mysql-lib="/Applications/MAMP/tmp/mysql/"')
install.packages('RMySQL',type='source',lib="/Users/rainier/Library/R/3.1/library"
,'--with-mysql-lib="/Applications/MAMP/"')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source',lib="/usr/local/msql/")
install.packages('RMySQL',type='source',lib="/Users/rainier/Library/R/3.1/library" ,'--with-mysql-lib="/usr/local/msql/"'')
)
install.packages('RMySQL',type='source',lib="/Users/rainier/Library/R/3.1/library" ,'--with-mysql-lib="/usr/local/msql/')
install.packages('RMySQL',type='source','--with-mysql-lib="/usr/local/msql/"')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source','--with-mysql-lib=/usr/local/msql/')
install.packages('RMySQL',type='source','--with-mysql-lib=/usr/local/msql/lib')
install.packages('RMySQL',type='source','--with-mysql-lib=/usr/local/mysql-5.6.19-osx10.7-x86_64')
install.packages('RMySQL',type='source','--with-mysql-dir=/usr/local/mysql-5.6.19-osx10.7-x86_64')
R CMD
install.packages('RMySQL',type='source','--with-mysql-dir=/usr/local/')
install.packages("RODBC", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages('RODBC',type='source')
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
setwd("~/Desktop/Rcoursera/Curso5/ReproducibleData")
